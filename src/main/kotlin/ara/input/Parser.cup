package ara.input;

import java_cup.runtime.*;
import java.util.*;
import java.util.function.Function;

import ara.Direction;
import ara.input.symbol.Token;
import ara.position.*;
import ara.syntax.Syntax;
import ara.syntax.Syntax.*;

parser code {:
public InputSource source;
public SyntaxErrorReporter reporter;

private static <T> List<T> nil() {
    return new LinkedList<>();
}

private static <T> List<T> cons(T head, List<T> tail) {
    tail.add(0, head);
    return tail;
}

private <S extends Syntax> S withRange(S syntax, int left, int right) {
    syntax.setRange(new Range(source, left, right));
    return syntax;
}

private Instruction newArithmeticAssignmentIfValid(
    List<ResourceExpression> dsts, List<ResourceExpression> srcs, ArithmeticModifier mod,
    int left, int right
) {
    if (dsts.size() != 1 || srcs.size() != 1) {
        reporter.reportCustomError("Arithmetic modifiers are only allowed with individual assignments.", new Range(source, left, right));
        return withRange(new MultiAssignment(dsts, srcs), left, right);
    }
    return withRange(new ArithmeticAssignment(dsts.get(0), srcs.get(0), mod), left, right);
}

@Override
public void syntax_error(Symbol currentToken) {
    expected_token_ids(); // First call sometimes returns invalid results.
    reporter.reportWrongToken((Token) currentToken, expected_token_ids());
}

@Override
public void unrecovered_syntax_error(Symbol currentToken) {
    done_parsing();
}
:}

terminal String     IDENTIFIER;
terminal Integer    INTEGER;
terminal String     UNKNOWN;
terminal List<String> HASHCOMMENT;

terminal    NULL;
terminal    ROUTINE, TYPE;
terminal    CALL, UNCALL;
terminal    COLON, DOT, COMMA, EQ, AMPERSAND;
terminal    ASSIGNMENT;

terminal    OPERATOR_ADD, OPERATOR_SUB, OPERATOR_XOR, OPERATOR_MUL, OPERATOR_DIV, OPERATOR_MOD;
terminal    OPERATOR_EQU, OPERATOR_NEQ, OPERATOR_LST, OPERATOR_LSE, OPERATOR_GRT, OPERATOR_GRE;

terminal    ARROW_L, ARROW_R;
terminal    PAREN_L, PAREN_R;
terminal    CURL_L, CURL_R;
terminal    AMPERSAND_PAREN_L, AMPERSAND_CURL_L;

non terminal Program                    Program;
non terminal Identifier                 Identifier;
non terminal List<Definition>           GlobalDefinitionList;
non terminal Definition                 Definition, TypeDefinition, RoutineDefinition;
non terminal List<Parameter>            ParameterList, ParameterListTail;
non terminal Parameter                  Parameter;
non terminal List<Instruction>          Body, InstructionList;
non terminal Instruction                Instruction, Assignment, Control, Call;
non terminal List<ResourceExpression>   ArgumentList, ArgumentListTail, ResourceList;
non terminal ResourceExpression         ResourceExpression, IntegerLiteral, StructureLiteral, AllocationExpression, NullReference;
non terminal List<StructureLiteral.Member> StructureLiteralMembersList, StructureLiteralMemberListTail;
non terminal StructureLiteral.Member    StructureLiteralMember;
non terminal Storage                    Storage, BaseStorage, NamedStorage;
non terminal List<Function<Storage, Storage>> StorageSuffixes;
non terminal Function<Storage, Storage> TypedStorageSuffix, MemberAccessSuffix;
non terminal Memory                     Memory;
non terminal List<Function<Memory, Memory>> MemorySuffixes;
non terminal Function<Memory, Memory>   DereferencedMemorySuffix, MemoryMemberSuffix;
non terminal ArithmeticModifier         ArithmeticModifier;
non terminal ArithmeticExpression       ArithmeticExpression, ArithmeticBinary, ArithmeticValue;
non terminal ConditionalExpression      ConditionalExpression, ComparativeBinary;
non terminal Type                       Type, NamedType, StructureType, ReferenceType;
non terminal List<StructureType.Member> StructureTypeMemberList, StructureTypeMemberListTail;
non terminal StructureType.Member       StructureTypeMember;
non terminal ModificationOperator       ModificationOperator;
non terminal ComparisonOperator         ComparisonOperator;
non terminal BinaryOperator             BinaryOperator;
non terminal IgnoredCommentLines;
non terminal Epsilon;

start with Program;

Epsilon ::= /* Empty symbol. */
          ;

IgnoredCommentLines ::= HASHCOMMENT
                      | Epsilon
                      ;

Identifier ::= IDENTIFIER:name
                {: RESULT = withRange(new Identifier(name), nameleft, nameright); :}
             ;

//
//
//

Program ::= IgnoredCommentLines GlobalDefinitionList:result
             {: RESULT = new Program(result); :}
          ;

GlobalDefinitionList ::= Definition:head GlobalDefinitionList:tail
                          {: RESULT = cons(head, tail); :}
                       | Epsilon
                          {: RESULT = nil(); :}
                       ;

Definition ::= TypeDefinition:result
                {: RESULT = result; :}
             | RoutineDefinition:result
                {: RESULT = result; :}
             | error
             ;

TypeDefinition ::= TYPE:l Identifier:name EQ Type:type
                    {: RESULT = withRange(new TypeDefinition(name, type), lleft, typeright); :}
                 ;

RoutineDefinition ::= ROUTINE:anchor Identifier:name PAREN_L ParameterList:in ARROW_R ParameterList:out PAREN_R Body:body
                       {: RESULT = withRange(new RoutineDefinition(name, in, out, body), anchorleft, bodyright); :}
                    | ROUTINE:anchor Identifier:name PAREN_L ParameterList:in PAREN_R ARROW_R PAREN_L ParameterList:out PAREN_R Body:body
                       {: RESULT = withRange(new RoutineDefinition(name, in, out, body), anchorleft, bodyright); :}
                    ;

Body ::= CURL_L InstructionList:body CURL_R
          {: RESULT = body; :}
       ;

//
//
//

ParameterList ::= Parameter:head ParameterListTail:tail
                   {: RESULT = cons(head, tail); :}
                | Epsilon
                   {: RESULT = nil(); :}
                ;

ParameterListTail ::= COMMA Parameter:head ParameterListTail:tail
                       {: RESULT = cons(head, tail); :}
                    | Epsilon
                       {: RESULT = nil(); :}
                    ;

Parameter ::= Identifier:name
               {: RESULT = withRange(new Parameter(name, null), nameleft, nameright); :}
            | Identifier:name COLON Type:type
               {: RESULT = withRange(new Parameter(name, type), nameleft, typeright); :}
            ;

//
//
//

InstructionList ::= Instruction:head  InstructionList:tail
                     {: RESULT = cons(head, tail); :}
                  | Epsilon
                     {: RESULT = nil(); :}
                  ;

Instruction ::= Assignment:result
                 {: RESULT = result; :}
              | Control:result
                 {: RESULT = result; :}
              | Call:result
                 {: RESULT = result; :}
              ;

Assignment ::= ArgumentList:dst ASSIGNMENT ArgumentList:src
                {: RESULT = withRange(new MultiAssignment(dst, src), dstleft, srcright); :}
             | ArgumentList:dst ASSIGNMENT ResourceList:src
                {: RESULT = withRange(new MultiAssignment(dst, src), dstleft, srcright); :}
             | ResourceList:dst ASSIGNMENT ArgumentList:src
                {: RESULT = withRange(new MultiAssignment(dst, src), dstleft, srcright); :}
             | ResourceList:dst ASSIGNMENT ResourceList:src
                {: RESULT = withRange(new MultiAssignment(dst, src), dstleft, srcright); :}

             | ArgumentList:dst ASSIGNMENT ArgumentList:src ArithmeticModifier:mod
                {: RESULT = newArithmeticAssignmentIfValid(dst, src, mod, dstleft, srcright); :}
             | ArgumentList:dst ASSIGNMENT ResourceList:src ArithmeticModifier:mod
                {: RESULT = newArithmeticAssignmentIfValid(dst, src, mod, dstleft, srcright); :}
             | ResourceList:dst ASSIGNMENT ArgumentList:src ArithmeticModifier:mod
                {: RESULT = newArithmeticAssignmentIfValid(dst, src, mod, dstleft, srcright); :}
             | ResourceList:dst ASSIGNMENT ResourceList:src ArithmeticModifier:mod
                {: RESULT = newArithmeticAssignmentIfValid(dst, src, mod, dstleft, srcright); :}
             ;


Control ::= ARROW_R:arrow Identifier:label
             {: RESULT = withRange(new Unconditional(Direction.FORWARD, label), arrowleft, labelright); :}
          | ARROW_L:arrow Identifier:label
             {: RESULT = withRange(new Unconditional(Direction.BACKWARD, label), arrowleft, labelright); :}
          | ARROW_R:arrow Identifier:ltarget COMMA Identifier:rtarget ConditionalExpression:condition
             {: RESULT = withRange(new Conditional(Direction.FORWARD, ltarget, rtarget, condition), arrowleft, conditionright); :}
          | ARROW_L:arrow Identifier:ltarget COMMA Identifier:rtarget ConditionalExpression:condition
             {: RESULT = withRange(new Conditional(Direction.BACKWARD, ltarget, rtarget, condition), arrowleft, conditionright); :}
          ;

Call ::= ArgumentList:lhs ASSIGNMENT CALL Identifier:routine ArgumentList:rhs
          {: RESULT = withRange(new Call(lhs, rhs, Direction.FORWARD, routine), lhsleft, rhsright); :}
       | ArgumentList:lhs ASSIGNMENT UNCALL Identifier:routine ArgumentList:rhs
          {: RESULT = withRange(new Call(lhs, rhs, Direction.BACKWARD, routine), lhsleft, rhsright); :}
       ;

//
//
//

ArgumentListTail ::= COMMA ResourceExpression:head ArgumentListTail:tail
                      {: RESULT = cons(head, tail); :}
                   | Epsilon
                      {: RESULT = nil(); :}
                   ;

ArgumentList ::= PAREN_L ResourceExpression:head ArgumentListTail:tail PAREN_R
                  {: RESULT = cons(head, tail); :}
               | PAREN_L PAREN_R
                  {: RESULT = nil(); :}
               ;

ResourceList ::= ResourceExpression:head ArgumentListTail:tail
                  {: RESULT = cons(head, tail); :}
               ;

ResourceExpression ::= IntegerLiteral:result
                        {: RESULT = result; :}
                     | StructureLiteral:result
                        {: RESULT = result; :}
                     | AllocationExpression:result
                        {: RESULT = result; :}
                     | NullReference:result
                        {: RESULT = result; :}
                     | Storage:result
                        {: RESULT = result; :}
                     | Memory:result
                        {: RESULT = result; :}
                     ;

StructureLiteral ::= CURL_L:l StructureLiteralMembersList:members CURL_R:r
                      {: RESULT = withRange(new StructureLiteral(members), lleft, rright); :}
                   ;

StructureLiteralMembersList ::= StructureLiteralMember:head StructureLiteralMemberListTail:tail
                                 {: RESULT = cons(head, tail); :}
                              | Epsilon
                                 {: RESULT = nil(); :}
                              ;

StructureLiteralMemberListTail ::= COMMA StructureLiteralMember:head StructureLiteralMemberListTail:tail
                                    {: RESULT = cons(head, tail); :}
                                 | Epsilon
                                    {: RESULT = nil(); :}
                                 ;

StructureLiteralMember ::= Identifier:name EQ ResourceExpression:value
                            {: RESULT = withRange(new StructureLiteral.Member(name, value), nameleft, valueright); :}
                         ;

IntegerLiteral ::= INTEGER:value
                    {: RESULT = withRange(new IntegerLiteral(value), valueleft, valueright); :}
                 ;

NullReference ::= NULL:anchor
                   {: RESULT = withRange(new NullReferenceLiteral(), anchorleft, anchorright); :}
                ;

AllocationExpression ::= AMPERSAND_PAREN_L:l ResourceExpression:expression PAREN_R:r
                          {: RESULT = withRange(new AllocationExpression(expression), lleft, rright); :}
                       | AMPERSAND_CURL_L:l StructureLiteralMembersList:members CURL_R:r
                          {: var allocated = withRange(new StructureLiteral(members), lleft, rright);
                             RESULT = withRange(new AllocationExpression(allocated), lleft, rright); :}
                       ;

Storage ::= BaseStorage:base StorageSuffixes:suffixes
             {: RESULT = base;
                for (var constructor : suffixes) {
                    RESULT = constructor.apply(RESULT);
                }
             :}
          ;

BaseStorage ::= NamedStorage:result
                 {: RESULT = result; :}
              ;

NamedStorage ::= Identifier:name
                  {: RESULT = withRange(new NamedStorage(name), nameleft, nameright); :}
               ;

StorageSuffixes ::= TypedStorageSuffix:head StorageSuffixes:tail
                     {: RESULT = cons(head, tail); :}
                  | MemberAccessSuffix:head StorageSuffixes:tail
                     {: RESULT = cons(head, tail); :}
                  | Epsilon
                     {: RESULT = nil(); :}
                  ;

TypedStorageSuffix ::= COLON:l Type:type
                        {: RESULT = (base) -> withRange(new TypedStorage(base, type), lleft, typeright); :}
                     ;

MemberAccessSuffix ::= DOT:l Identifier:member
                        {: RESULT = (base) -> withRange(new MemberAccess(base, member), lleft, memberright); :}
                     ;

Memory ::= Storage:storage AMPERSAND:anchor MemorySuffixes:suffixes
            {: RESULT = withRange(new DereferencedStorage(storage), anchorleft, anchorright);
               for (var constructor : suffixes) {
                   RESULT = constructor.apply(RESULT);
               }
            :}
         ;

MemorySuffixes ::= MemoryMemberSuffix:head MemorySuffixes:tail
                    {: RESULT = cons(head, tail); :}
                 | DereferencedMemorySuffix:head MemorySuffixes:tail
                    {: RESULT = cons(head, tail); :}
                 | Epsilon
                    {: RESULT = nil(); :}
                 ;

DereferencedMemorySuffix ::= AMPERSAND:anchor
                              {: RESULT = (base) -> withRange(new DereferencedMemory(base), anchorleft, anchorright); :}
                           ;

MemoryMemberSuffix ::= DOT:l Identifier:member
                        {: RESULT = (base) -> withRange(new MemoryMemberAccess(base, member), lleft, memberright); :}
                     ;

//
//
//

ArithmeticModifier ::= ModificationOperator:op ArithmeticExpression:expression
                        {: RESULT = withRange(new ArithmeticModifier(op, expression), opleft, expressionright); :}
                     ;

ArithmeticExpression ::= ArithmeticBinary:result
                          {: RESULT = result; :}
                       | ArithmeticValue:result
                          {: RESULT = result; :}
                       ;

ArithmeticBinary ::= PAREN_L:l ResourceExpression:lhs BinaryOperator:op ResourceExpression:rhs PAREN_R:r
                     {: RESULT = withRange(new ArithmeticBinary(lhs, op, rhs), lleft, rright); :}
                   | ResourceExpression:lhs BinaryOperator:op ResourceExpression:rhs
                     {: RESULT = withRange(new ArithmeticBinary(lhs, op, rhs), lhsleft, rhsright); :}
                   ;

ArithmeticValue ::= ResourceExpression:value
                     {: RESULT = withRange(new ArithmeticValue(value), valueleft, valueright); :}
                  | PAREN_L:l ResourceExpression:value PAREN_R:r
                     {: RESULT = withRange(new ArithmeticValue(value), lleft, rright); :}
                  ;

ConditionalExpression ::= ComparativeBinary:binary
                           {: RESULT = binary; :}
                        ;

ComparativeBinary ::= PAREN_L:l ResourceExpression:lhs ComparisonOperator:op ResourceExpression:rhs PAREN_R:r
                       {: RESULT = withRange(new ComparativeBinary(lhs, op, rhs), lleft, rright); :}
                    ;

//
//
//

Type ::= NamedType:type
          {: RESULT = type; :}
       | StructureType:type
          {: RESULT = type; :}
       | ReferenceType:type
          {: RESULT = type; :}
       ;

NamedType ::= Identifier:name
               {: RESULT = withRange(new NamedType(name), nameleft, nameright); :}
            ;

ReferenceType ::= AMPERSAND:anchor Type:type
                   {: RESULT = withRange(new ReferenceType(type), anchorleft, anchorright); :}
                ;

StructureType ::= CURL_L:l StructureTypeMemberList:members CURL_R:r
                   {: RESULT = withRange(new StructureType(members), lleft, rright); :}
                ;

StructureTypeMemberList ::= StructureTypeMember:head StructureTypeMemberListTail:tail
                             {: RESULT = cons(head, tail); :}
                          | Epsilon
                             {: RESULT = nil(); :}
                          ;

StructureTypeMemberListTail ::= COMMA StructureTypeMember:head StructureTypeMemberListTail:tail
                                 {: RESULT = cons(head, tail); :}
                              | Epsilon
                                 {: RESULT = nil(); :}
                              ;

StructureTypeMember ::= Identifier:name COLON Type:type
                         {: RESULT = withRange(new StructureType.Member(name, type), nameleft, typeright); :}
                      ;

//
//
//

ModificationOperator ::= OPERATOR_ADD
                          {: RESULT = ModificationOperator.ADD; :}
                       | OPERATOR_SUB
                          {: RESULT = ModificationOperator.SUB; :}
                       | OPERATOR_XOR
                          {: RESULT = ModificationOperator.XOR; :}
                       ;

ComparisonOperator ::= OPERATOR_EQU
                        {: RESULT = ComparisonOperator.EQU; :}
                     | OPERATOR_NEQ
                        {: RESULT = ComparisonOperator.NEQ; :}
                     | OPERATOR_LST
                        {: RESULT = ComparisonOperator.LST; :}
                     | OPERATOR_LSE
                        {: RESULT = ComparisonOperator.LSE; :}
                     | OPERATOR_GRT
                        {: RESULT = ComparisonOperator.GRT; :}
                     | OPERATOR_GRE
                        {: RESULT = ComparisonOperator.GRE; :}
                     ;

BinaryOperator ::= OPERATOR_ADD
                    {: RESULT = BinaryOperator.ADD; :}
                 | OPERATOR_SUB
                    {: RESULT = BinaryOperator.SUB; :}
                 | OPERATOR_XOR
                    {: RESULT = BinaryOperator.XOR; :}
                 | OPERATOR_MUL
                    {: RESULT = BinaryOperator.MUL; :}
                 | OPERATOR_DIV
                    {: RESULT = BinaryOperator.DIV; :}
                 | OPERATOR_MOD
                    {: RESULT = BinaryOperator.MOD; :}
                 ;

